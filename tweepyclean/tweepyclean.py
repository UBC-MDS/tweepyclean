
def raw_tweets(tweets):
    """
    Creates a dataframe with labeled columns from a tweepy.cursor.ItemIterator object.
    Parameters
    ----------
    tweets : tweepy.cursor.ItemIterator
        Input Iterator object generated using the tweepy package
    
    Returns
    -------
    tweets_df: pandas.core.frame.DataFrame
        Dataframe with labeled columns containing the id, created_at, full_text, favorite_count, retweet_count, retweeted, entities, in_reply_to_user_id, and source columns from the iterator
    
    Examples:
    --------
    #>>> raw_df(tweets)
    """

def clean_tweets(tweets):
    """
    Creates new columns based on the data in the pandas.dataframe generated by raw_df()
    Parameters
    ----------
    raw_dataframe: pandas.core.frame.DataFrame
        Dataframe generated by raw_tweets() which will have columns added to it
    handle: string, optional
        String which adds adds a column containing the a specified twitter handle, (default is none and adds no column)
    text_only : bool, optional
        Bool which specifies to add a column of the tweet text containing no emojis, links, hashtags, or mentions (default is True)
    emojis: bool, optional
        Bool which specifies to add a column of the extracted emojis from tweet text and places them in their own column (default is True)
    hashtags: bool, optional
        Bool which specifies to add a column of the extracted hashtags from tweet text (default is True)
    sentiment: bool, optional
        Bool which specifies to add a column containing the nltk.sentiment.vader SentimentIntensityAnalyzer sentiment score for each tweet (default is True)
    flesch_readability: bool, optional
        Bool which specifies to add a column containing the textstat flesch readability score (default is True)
    media_links: bool, optional 
        Bool which specifies to add a column containing links to photo or video attached to a tweet (default is True)
    proportion_of_avg_retweets: bool, optional
        Bool which specifies to add a column containing a proportion value of how many retweets a tweet received compared to the account average (default is True)
    proportion_of_avg_hearts: bool, optional
        Bool which specifies to add a column containing a proportion value of how many hearts a tweet received compared to the account average (default is True)
    
    Returns
    -------
    tweets_df_extra: pandas.core.frame.DataFrame
        Pandas dataframe containing the additional columns specified by the user.
    
    Examples
    --------
    #>>> extra_cols(tweets_df)
    #>>> extra_cols(tweets_df, flesch_readability = False)
    #>>> extra_cols(tweets_df, emojis = False, hashtags = False, sentiment = False)
    """

def tweet_words(clean_dataframe, top_n):
	
    """
	Returns the most common words and counts from a list of tweets
	
    Parameters
	----------
	clean_dataframe : pandas.DataFrame
		A processed dataframe containing a user's tweet history and associated information
	top_n : int
		An integer representing the the number of most common words to display
	
    Returns
	-------
	pandas.DataFrame
		A dataframe with one column containing individual words and a second column with the count of each word
	
    Examples:
	--------
	#>>> tweet_words(dataframe, 3)

	pd.DataFrame(data = {'words' : ['best', 'apple', 'news'], 'count' : [102, 52, 24]}) 
    """

def sentiment_total(data, lexicon):

    """
    Takes unaggregated tweet data and summarizes the number of tweeted words associated with particular emotional sentiments.

    Parameters:
    -------
    data: pandas.DataFrame 
        unaggregated tweet data. Obtained from using most_common().
    lexicon: string or list
        the particular sentiments the user selects.
                    
    Returns:
    --------
    pandas.DataFrame

    Examples:
    ---------
    #>>> sentiment(df, “nrc”)

    A tibble: 3 x 3
    sentiment      total_words     words
    <chr>          <int>           <dbl>
    anger          4901            321
    anticipation   4901            256
    disgust        4901            207
    """

def tweet_engagement_hour(tweets):
    """
    Creates a line chart of total number of likes, comments and retweets received by hour of tweet posted.
    
    Parameters
    ----------
    tweets : pandas.DataFrame
        A processed dataframe containing a user's tweet history and associated information
    
    Returns
    -------
    An Altair graph object (line chart) of total engagement received by hour of tweet posted
    
    Examples
    --------
    #>>> engagement_by_hour(tweets_df)
    """


